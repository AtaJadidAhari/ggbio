%\VignetteIndexEntry{An Introduction to ggbio}
%\VignetteDepends{}
%\VignetteKeywords{visualization utilities}
%\VignettePackage{biovizBase}
\documentclass[10pt]{article}

% \usepackage{times}
\usepackage{hyperref}
\usepackage{verbatim}
\usepackage{graphicx}

\SweaveOpts{width = 5, height = 4.5}

\textwidth=6.5in
\textheight=8.5in
%\parskip=.3cm
\oddsidemargin=-.1in
\evensidemargin=-.1in
\headheight=-.3in

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rcode}[1]{{\texttt{#1}}}

\newcommand{\software}[1]{\textsf{#1}}
\newcommand{\R}{\software{R}}
\newcommand{\IRanges}{\Rpackage{IRanges}}
\newcommand{\biovizBase}{\Rpackage{biovizBase}}
\newcommand{\ggbio}{\Rpackage{ggbio}}
\newcommand{\visnab}{\Rpackage{visnab}}
\newcommand{\ggplot}{\Rpackage{ggplot2}}
\newcommand{\grid}{\Rpackage{grid}}
\newcommand{\gridExtra}{\Rpackage{gridExtra}}
\newcommand{\qplot}{\Rfunction{qplot}}

\title{An Introduction to \ggbio{}}
\author{Tengfei Yin}
\date{\today}

\begin{document}
\maketitle
\newpage
\tableofcontents
\newpage

<<options,echo=FALSE>>=
options(width=72)
@

\section{Introduction}

The \R{} package, \ggbio{}, provided a toolkit for visualizing
biological data, using static \R{} graphics. This package extends the
\ggplot{} package\footnote{\url{http://had.co.nz/ggplot2/}}, which
provides elegant static graphics, based on the grammar of
graphics. The syntax and style of commands follows that of
\ggplot{}. For those plots which require a low level manipulation on
graphics some plots are enhanced using \grid{} or \gridExtra{}.
% DI: Explain what is meant by biological data

The goal is to provide high quality graphics for both analysis and
publication purposes, requiring some rules:
\begin{itemize} \itemsep 0in
\item Be general. % DI: explain what you mean here.
\item Be object-oriented, by providing a generic function, eg
  \Robject{qplot}, which automatically can handle and plot different
  \R{} biological data objects in \software{Bioconductor} project.
\item To use \ggplot{} to develop graphics much as as possible, but
  hide the complexity. Most functions return a \Robject{ggplot}
  object, which allow users to further enhance this object, for
  example, add/change labels, changing color scheme, etc.
\item Be easy-to-use and user-friendly. For specific questions or most
  used graphics, we provide simple functions to that make the necessary
  graphics.
\end{itemize}

\section{Some Details of  \ggplot{}}

Extensive details about \ggplot{} are available in the on-line
documentation, or the web site
\url{http://had.co.nz/ggplot2/geom_point.html}. The key pieces of
describing a plot are these:

\begin{description} \itemsep 0in
\item [data] object to be visualized
\item [geoms] how elements of the data are mapped into the plot (points, lines, ...)
\item [statistics] transformations necessary on the data, eg binning for a histogram
\item [scale] scaling data values for plotting, matching colors to values, generating legends
\item [coordinates] axes, coordinate transformations, eg polar, and aspect ratios
  plot
%\item [display] Produces the picture, but should also provide interactivity (brushing, drill down, zooming)
\end{description}

There are very \textbf{important} differences between \ggbio{} and
\ggplot{}:
\begin{itemize} \itemsep 0in
\item The horizontal axis in \ggbio{}, for most plots, will be genomic
  coordinates or protein space. You can only specify the \emph{x} to
  be \emph{start, end, midpoint} describing interval data with width
  larger than 1. % DI: Maybe explain what you mean by protein space?
\item Facetting of the graphics, can only be done by \textbf{seqnames}
  or region on a chromosome. If \textbf{seqnames} is in the data
  structure, it automatically is used for facetting.
\end{itemize}

\section{Generic Visualization Method}

In the spirit of being general and object-oriented, following the
syntax of \ggplot{}, we redefine the \emph{quick plot} function
\qplot{} in \ggplot{} package, as a \textbf{S4} generic function. Then
the \qplot{} function could automatically and appropriately plot
different R objects. For each pbject type a new \textbf{geom} is
defined.

In the following section, we will introduce how to use \qplot{} to
plot different types of data to generate different displays.

\subsection{Plotting a \Robject{data.frame} }
This is a wrapper around the original \qplot{} function. when reading
in \Robject{data.frame} or \Robject{matrix} object, you can use
\qplot{} as usual without any change, it essentially just call
ggplot2::qplot.

% DI: Put the data(hg19IdeogramCyto) line in the correct place
@ 
<<loading, eval = FALSE>>=
library(ggbio)
data(hg19IdeogramCyto)
@ %def 

% \begin{figure}[h!t!p]
%   \centering
<<ggbio-loading, fig = FALSE, eval = FALSE>>=
p <- qplot(data = mtcars, mpg, cyl)
print(p)
@ %def 
%   \caption{qplot for data.frame}
%   \label{fig:qplot-data.frame}
% \end{figure}

\begin{figure}[h!t!p]
  \centering
\includegraphics[width = 0.55\textwidth]{intro-ggbio-loading.pdf}
\caption{If the data object is simply an R \Robject{data.frame}, the
  \Robject{qplot} defaults are used, which is the point geom.}
  \label{fig:qplot-data.frame}
\end{figure}

% DI: Expand all of the captions for the figures, like this one. Explain
% what the user is expected to learn from the plot.

\subsection{Plotting \Robject{GRanges} object}
A \Robject{GRanges} object is defined in \Rpackage{GenomicRanges}
package. It is one of the most important data structures coding
genomic information, organizing genomic data as intervals. Currently
\R{} does not have any convenient functions for visualizing interval
objects.

\subsubsection{Sample \Robject{Granges} object}
Let's first create a sample \Robject{GRanges} object that can be used
for following examples. We generate data, mimicking paired RNA-seq
data, that contains 1000 rows, 3 chromosomes, and meta data of
grouping and pairing information.
% DI: Explain what strand is

@ 
<<GRanges-sample, eval = FALSE>>=
set.seed(1)
N <- 1000
library(GenomicRanges)
gr <- GRanges(seqnames = 
              sample(c("chr1", "chr2", "chr3"),
                     size = N, replace = TRUE),
              IRanges(
                      start = sample(1:300, size = N, replace = TRUE),
                      width = sample(70:75, size = N,replace = TRUE)),
              strand = sample(c("+", "-", "*"), size = N, 
                replace = TRUE),
              value = rnorm(N, 10, 3), score = rnorm(N, 100, 30),
              group = sample(c("Normal", "Tumor"), 
                size = N, replace = TRUE),
              pair = sample(letters, size = N, 
                replace = TRUE))
head(gr)
@ %def 

\subsubsection{Supported Geoms}

For \Robject{GRanges} objects we support following \emph{geoms}:

\begin{description} \itemsep 0in
\item[full] Show the full stacked interval, a set of rectangles. Default.
\item[segment] Show full stacked interval, as a set of segments.
\item[line] Show line, which the user needs to provide.
\item[coverage.line] Show coverage by using line.
\item[coverage.polygon] Show coverage by using polygon.
\item[reduce]  Show reduced \Robject{GRanges} object.
\item[disjoin] Show disjoint \Robject{GRanges} object.
\item[histogram] Show histogram.
\item[splice] A wrapper around function \Rfunction{plotSpliceSum}, so
  when you set to \Rfunarg{geom} equals to \emph{splice}, you have to
  to provide arguments \Rfunarg{model}. 
\end{description}

This code generates the default plot of a \Robject{GRanges} object
(Figure \ref{fig:qplot-gr-full}). It uses the \texttt{full geom}, showing
the data as stacked intervals, automatically facetted by
\textbf{seqnames} (chromosome) and colored by the strand.

% \begin{figure}[h!t!p]
%   \centering
@ 
<<qplot-gr-full, fig = FALSE, eval = FALSE>>=
p <- qplot(gr)
print(p)
@ %def   
%   \caption{qplot for GRanges as geom full}
%   \label{fig:qplot-gr-full}
% \end{figure}
\begin{figure}[h!t!p]
  \centering
\includegraphics[width = 0.8\textwidth]{intro-qplot-gr-full.pdf}
  \caption{qplot for GRanges as \texttt{geom full}}
  \label{fig:qplot-gr-full}
\end{figure}

% DI: Can you regenerate the plots so that the text on the axes doesn't
% overlap?  Also explain what you learn from this plot: the data was
% simulated from uniform, which you see because the stacks are
% somewhat level, and the strand variable was randomly generated so
% there is no pattern to the colors

%As we could see from Figure \ref{fig:qplot-gr-full}, the default is
%\emph{automatically} facet by existing \textbf{seqnames} in the
%\Robject{GRanges} object. We can use \Rfunarg{nrow} and \Rfunarg{ncol} 
%to control the wrapping. 

%\begin{figure}[h!t!p]
%  \centering
%@ 
%<<qplot-gr-full-nrow1, fig = FALSE, eval = FALSE>>=
%p <- qplot(gr, nrow = 1)
%print(p)
%@ %def   
%  \caption{qplot for GRanges as geom full}
%  \label{fig:qplot-gr-full-nrow1}
%\end{figure}

%We we get the \Robject{ggplot} object, we could use all features from
%\ggplot{} package to manupuate this plot. Here we show a simple theme
%change.

In this next display (Figure \ref{fig:qplot-gr-full-themebw}), a
different theme was used to make the background white, and the facets
are laid out horizontally.

% \begin{figure}[h!t!p]
%   \centering
@ 
<<qplot-gr-full-themebw, fig = FALSE, eval = FALSE>>=
p <- qplot(gr, nrow = 1)
p <- p + theme_bw()
print(p)
@ %def   
%   \caption{qplot for GRanges as geom full}
%   \label{fig:qplot-gr-full-themebw}
% \end{figure}
\begin{figure}[h!t!p]
  \centering
\includegraphics[width = 0.8\textwidth]{intro-qplot-gr-full-themebw}
  \caption{qplot for GRanges as geom full}
  \label{fig:qplot-gr-full-themebw}
\end{figure}

In this next plot, the \texttt{coverage.p geom} is used (Figure
\ref{fig:qplot-gr-cov-line}).

% \begin{figure}[h!t!p]
%   \centering
@ 
<<qplot-gr-cov-line, fig = FALSE, eval = FALSE>>=
p <- qplot(gr, nrow = 1, geom = "coverage.p")
p + geom_hline(yintercept = 40, color = "red", 
    size = 1)
@ %def   
%   \caption{qplot for GRanges as geom full}
%   \label{fig:qplot-gr-cov-line}
% \end{figure}

\begin{figure}[h!t!p]
  \centering
\includegraphics[width = 0.8\textwidth]{intro-qplot-gr-cov-line}
  \caption{qplot for GRanges as \texttt{geom full}}
  \label{fig:qplot-gr-cov-line}
\end{figure}

You can also subset by the \Rfunarg{which} argument.

@ 
<<qplot-gr-subset, eval = FALSE>>=
gr.sub <- gr[seqnames(gr) == "chr1"] #or 
## p <- qplot(gr, seqnames = "chr1", ...) # or
## p <- qplot(gr, which = GRanges("chr1", IRanges(1e5, 2e5)), ...)
@ %def 

And let's plot all other geoms together by \Rfunction{grid.arrange} from
package \Rpackage{gridExtra} (Figure \ref{fig:all-geom-gr}).

% \begin{figure}[h!b!t!p]
%   \centering
@
<<qplot-gr-all, fig = FALSE, eval = FALSE>>=
p1 <- qplot(gr.sub, geom = "full") + opts(title = "full")
p2 <- qplot(gr.sub, geom = "point", y = value) + opts(title = "point")
p3 <- qplot(gr.sub, geom = "line", y = value) + opts(title = "line")
p4 <- qplot(gr.sub, geom = "coverage.line") + opts(title = "coverage.line")   
p5 <- qplot(gr.sub, geom = "coverage.polygon") + opts(title = "coverage.polygon")   
p6 <- qplot(gr.sub, geom = "reduce") + opts(title = "reduce")   
p7 <- qplot(gr.sub, geom = "disjoin") + opts(title = "disjoin")      
p8 <- qplot(gr.sub, geom = "histogram") + opts(title = "histogram")      
library(gridExtra)
grid.arrange(p1, p2, p3, p4, p5, p6, p7 ,p8, ncol = 2)
@ %def     
%   \caption{All common geoms(except splice) for GRanges object}
%   \label{fig:all-geom-gr}
% \end{figure}
\begin{figure}[h!b!t!p]
  \centering
\includegraphics[width = 0.9\textwidth]{intro-qplot-gr-all}
  \caption{All common geoms(except splice) for GRanges object}
  \label{fig:all-geom-gr}
\end{figure}

\subsubsection{Facetting}

Faceting in \ggbio{} is more restricted than in \ggplot{}:

\begin{itemize} \itemsep 0in
\item The facetting variable can only be \Rfunction{seqnames} or regions
  on the genome. So we limited the formula passing to \Rfunarg{facet},
  e.g something \~ seqnames, is accepted formula, you can change
  \emph{something} to variable name in the elementMetadata. But you
  cannot change the second part.
\item Sometimes, we need to view different regions, so we also have a
  \Rfunarg{facet\_gr} argument which accept a \Robject{GRanges}. If
  this is provided, it will override the default \textbf{seqnames} and use
  provided region to facet the graphics, which might be useful for
  different gene centric views.
\end{itemize}

Figure \ref{fig:facet.group} shows we could only specify the facet row
to be one the categorical variables in elementMetadata. 

% \begin{figure}[h!t!p]
%   \centering
@ 
<<facet-group, fig = FALSE, eval = FALSE>>=
  p <- qplot(gr, facet = group ~ seqnames)
  print(p)
@ %def 
  
%   \caption{Facet by group}
%   \label{fig:facet.group}
% \end{figure}
\begin{figure}[h!t!p]
  \centering
\includegraphics[width = 0.8\textwidth]{intro-facet-group}
  \caption{Facet by group}
  \label{fig:facet.group}
\end{figure}

Figure \ref{fig:facet.gr} shows how to facet by \Rfunarg{facet\_gr}
arguments.

% \begin{figure}[h!t!p]
%   \centering
  
  @ 
<<facet-gr, fig = FALSE, eval = FALSE>>=
 gr.region <- GRanges(c("chr1", "chr2", "chr3"), 
  IRanges(c(100, 200, 250), 
  width = 70))
  p <- qplot(gr, facet_gr = gr.region, nrow = 1)
  print(p)  
@ %def 

%   \caption{Facet by regions}
%   \label{fig:facet.gr}
% \end{figure}
\begin{figure}[h!t!p]
  \centering
\includegraphics[width = 0.8\textwidth]{intro-facet-gr}
  \caption{Facet by regions}
  \label{fig:facet.gr}
\end{figure}

\subsection{For \Robject{GRangesList} object}
It's just simply internally unlist the \Robject{GRangesList} object
and treat it as \Robject{GRanges} object.
% \begin{figure}[h!t!p]
%   \centering
@ 
<<grl-plot, fig = FALSE, eval = FALSE>>=
grl <- split(gr, seqnames(gr))
p <- qplot(grl)
print(p)
@ %def 
%   \caption{GRangesList plotting}
%   \label{fig:grl}
% \end{figure}
\begin{figure}[h!t!p]
  \centering
\includegraphics[width = 0.8\textwidth]{intro-grl-plot}
  \caption{GRangesList plotting}
  \label{fig:grl}
\end{figure}


\subsection{For \Robject{IRanges} object}
Similar to \qplot{} for \Robject{GRanges}, supported geoms includes, 
\emph{full, segment, histogram, coverage.line, coverage.polygon, reduce}

% 
% \begin{figure}[h!t!p]
%   \centering
% @ 
<<iranges-plot, fig = FALSE, eval = FALSE>>=
ir <- ranges(gr[seqnames(gr) == "chr1"])
p1 <- qplot(ir) + opts(title = "full")
p2 <- qplot(ir, geom = "segment")+ opts(title = "segment")
p3 <- qplot(ir, geom = "coverage.line")+ opts(title = "coverage.line")
p4 <- qplot(ir, geom = "coverage.polygon")+ opts(title = "coverage.polygon")
p5 <- qplot(ir, geom = "reduce")+ opts(title = "reduce")
p6 <- qplot(ir, geom = "histogram")+ opts(title = "histogram")
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 2)
@ %def 
%   \caption{IRanges geoms}
%   \label{fig:iranges-plot}
% \end{figure}

\subsection{For \Robject{GappedAlignments} object}
Supportd geom includes:
\begin{description} \itemsep 0in
\item[gapped.pair] Consider junction reads information, and assign
  stepping levels based on that information, could be used to show
  junction. The \Rfunarg{show.junction} could control show the
  junction reads or not
\item[full] Show as the \emph{full} geom like for \Robject{GRanges}
  object, randomly assign stepping levels.
\end{description}


% \begin{figure}[h!p!t]
%   \centering
@ 
<<gapped-plot, fig = FALSE, eval = FALSE>>=
library(Rsamtools)
bamfile <- system.file("extdata", "SRR027894subRBM17.bam", package="biovizBase")
ga <- readBamGappedAlignments(bamfile, use.names = TRUE)
p1 <- qplot(ga)
p2 <- qplot(ga, show.junction = TRUE)
p3 <- qplot(ga, geom = "full")
grid.arrange(p1, p2, p3, ncol = 1)
@ %def 
% \caption{GappedAlignments virsualization. The one on the left shows
%   geom ``gapped.pair'', which try to put the one belongs to the same
%   read in the same step level, and make sure nothing falls in between,
%   this is usefull when show.junction = TRUE. The one on the right, is
%   use ``simple'' geom, which just show as formal GRanges.}
%   \label{fig:gapped-ori}
% \end{figure}
\begin{figure}[h!p!t]
  \centering
\includegraphics[width = 0.55\textwidth]{intro-gapped-plot}
\caption{GappedAlignments virsualization. The one on the left shows
  geom ``gapped.pair'', which try to put the one belongs to the same
  read in the same step level, and make sure nothing falls in between,
  this is usefull when show.junction = TRUE. The one on the right, is
  use ``simple'' geom, which just show as formal GRanges.}
  \label{fig:gapped-ori}
\end{figure}


% \begin{figure}[h!p!t]
%   \centering
@ 
<<gapped-plot-zoom, fig = FALSE, eval = FALSE>>=
p1 <- p1 + scale_x_continuous(limits = c(6134000, 6135000))
print(p1)
@ %def 
%   \caption{GappedAlignments virsualization: simple zoom in}
%   \label{fig:gapped-zoom}
% \end{figure}

\begin{figure}[h!p!t]
  \centering
\includegraphics[width = 0.8\textwidth]{intro-gapped-plot-zoom}
  \caption{GappedAlignments virsualization: simple zoom in}
  \label{fig:gapped-zoom}
\end{figure}


\subsection{For \Robject{BamFile} object}
Supported geoms includs:
\begin{description} \itemsep 0in
  \item[gapped.pair] Like for \Robject{GappedAlignments} object.
  \item[full] Like for \Robject{GappedAlignments} object.
  \item[fragment.length] \emph{NOTE:} This return a track.
  \item[coverage.line] like for \Robject{GRanges} object
  \item[coverage.polygon] like for \Robject{GRanges} object
  \item[mismatch] TODO.(underlying computation is finished)
  \item[read.summary] TODO.(underlying computation is finished)
\end{description}
\subsection{For \Robject{TranscriptDb} object}
Supported geoms including
\begin{description} \itemsep 0in
\item[full] Full model
\item[single] Reduced model
\end{description}

Figure \ref{fig:txdb} shows two tracks for a \Robject{TranscriptDb} object.

% \begin{figure}[h!t!b!p]
%   \centering
@ 
<<txdb-plot, fig = FALSE, eval = FALSE>>=
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- Hsapiens_UCSC_hg19_knownGene_TxDb
data(genesymbol)
p.full <- qplot(txdb, geom = "full", which = genesymbol[1])
p.single <- qplot(txdb, geom = "single", which = genesymbol[1])
tracks(p.full, p.single, heights = c(40, 10))
@ %def 
%   \caption{TranscriptDb visualization. First track showing full model, second track showing reduced one.}
%   \label{fig:txdb}
% \end{figure}


\subsection{For \Robject{BSgenome} object}
\begin{description} \itemsep 0in
\item[text] Showing nucleotides as text.
\item[segment] Showing nucleotides as color-coded segment.
\item[point] Showing nucleotides as color-coded point.
\item[rectangle] Showing nucleotides as color-coded rectangle.
\end{description}

Figure \ref{fig:BSgenome} shows four tracks(with four geom) for a
\Robject{BSgenome} object.
% \begin{figure}[h!t!p]
%   \centering
@ 
<<BSgenome-tracks, fig = FALSE, eval = FALSE>>=
library(BSgenome.Hsapiens.UCSC.hg19)
gr <- GRanges("chr1", IRanges(5e7, 5e7+50))
p1 <- qplot(Hsapiens, name = gr, geom = "text")
p2 <- qplot(Hsapiens, name = gr, geom = "point")
p3 <- qplot(Hsapiens, name = gr, geom = "segment")
p4 <- qplot(Hsapiens, name = gr, geom = "rectangle")
tracks(p1, p2, p3, p4)
@ %def 
%   \caption{BSgenome with four geoms, first one is text, second is point, third one is segment, and fourth one is rectangle

\begin{figure}[h!p!t]
  \centering
\includegraphics[width = 0.8\textwidth]{intro-BSgenome-tracks}
  \caption{BSgenome with four geoms, first one is text, second is point, third one is segment, and fourth one is rectangle}
  \label{fig:BSgenome}
\end{figure}



\section{Overview}
\emph{Bird Eye Overview} is useful to see the overal distribution of
certain events. For static graphic, we currently only support stacked
overview as ideogram, or for single chromosome.
\subsection{Stacked Overview}
Stacked overview is useful to visualzie the annotation across the
genome, you can use \Rfunction{plotOverview} function to directly plot
the result from \Rfunction{getIdeogram} for certain species. And you
could control wether to plot the cytoband or not.

Figure \ref{fig:plotOverview-cyto} shows how to plot stacked overview
with cytoband. We change the name to make the label more
clear. \Rfunction{renameSeqlevels} function from
\Rpackage{GenomicRanges} is a good choice.

% \begin{figure}[h!t!p]
%   \centering
@ 
<<plotOverview-cyto, fig = FALSE, eval = FALSE>>=
## make shorter and clean labels
appendixold.chrs <- seqnames(seqinfo(hg19IdeogramCyto))
new.chrs <- gsub("chr", "", old.chrs)
## lst <- as.list(new.chrs)
names(new.chrs) <- old.chrs
new.ideo <- renameSeqlevels(hg19IdeogramCyto, new.chrs)
p <- plotOverview(new.ideo, cytoband = TRUE)
print(p)
@ %def   
%   \caption{Stacked overview with cytoband}
%   \label{fig:plotOverview-cyto}
% \end{figure}

\begin{figure}[h!t!p]
  \centering
  \includegraphics[width = 0.8\textwidth]{intro-plotOverview-cyto.pdf}
  \caption{Stacked overview with cytoband}
  \label{fig:plotOverview-cyto}
\end{figure}




Clearly, it's not good for visualizing the annotation at the same
time, so we could plot it without cytoband. This accept a full
ideogram which will be reduced automatically. You could also just use
\textbf{hg19Ideogram} dataset.
% \begin{figure}[h!t!p]
  % \centering
@ 
<<plotOverview-nocyto, fig = FALSE, eval = FALSE>>=
p <- plotOverview(new.ideo, cytoband = FALSE)
print(p)
@ %def   
%   \caption{Stacked overview without cytoband}
%   \label{fig:plotOverview-nocyto}
% \end{figure}

\begin{figure}[h!t!p]
  \centering
  \includegraphics[width = 0.8\textwidth]{intro-plotOverview-nocyto.pdf}  
  \caption{Stacked overview without cytoband}
  \label{fig:plotOverview-nocyto}
\end{figure}

Then we could simply use \Rfunction{geom\_hotregion} function to read
in a \Robject{GRanges} object as other geoms(except they read in
\Robject{data.frame}). And use \textbf{+} to simply add a annotation
track on top with overview, they will automatically plot on the same
chromosome and on the same x scale.

Figure \ref{fig:plotOverview-nocyto-darned} shows an example
of subset of RNA editing set. 

\textbf{NOTE:} user need to make sure the \Rfunction{seqnames} are
consistency in two datas, otherwise you are going to make weird
graphics, because they can not be mapped in the right way.
% \begin{figure}[h!t!p]
%   \centering
@ 
<<plotOverview-nocyto-darned, fig = FALSE, eval = FALSE>>=
data(darned_hg19_subset500)
## rename 
new.darned <- renameSeqlevels(darned_hg19_subset500, lst)
p <- p + geom_hotregion(new.darned)
print(p)
@ %def   
% \caption{Stacked overview without cytoband and with subseted DARNED
%   data on it}
%   \label{fig:plotOverview-nocyto-darned}
% \end{figure}

\begin{figure}[h!t!p]
  \centering
  \includegraphics[width = 0.8\textwidth]{intro-plotOverview-nocyto-darned.pdf}    
\caption{Stacked overview without cytoband and with subseted DARNED
  data on it}
  \label{fig:plotOverview-nocyto-darned}
\end{figure}

We can also use \Rfunarg{color} argument to use color to indicate a
column in the elementMetadata.

Let's try to use color to indicate which exon region the editing site
is, \emph{3} means 3' UTR, \emph{5} means 5' UTR, \emph{C} means it's
\emph{CDS}, and \textbf{NA} indicate missing.

% \begin{figure}[h!t!p]
%   \centering
@ 
<<plotOverview-nocyto-darned-exon, fig = FALSE, eval = FALSE>>=
p <- plotOverview(new.ideo, cytoband = FALSE)
p <- p + geom_hotregion(new.darned, aes(color = exReg))
print(p)
@ %def   
% \caption{Stacked overview without cytoband and with subseted DARNED
%   data on it}
%   \label{fig:plotOverview-nocyto-darned}
% \end{figure}

\begin{figure}[h!t!p]
  \centering
  \includegraphics[width = 0.8\textwidth]{intro-plotOverview-nocyto-darned-exon.pdf}      
\caption{Stacked overview without cytoband and with subseted DARNED
  data on it}
  \label{fig:plotOverview-nocyto-darned-exon}
\end{figure}

% \begin{figure}[h!t!p]
%   \centering
@ 
<<plotSingleChrom, fig = FALSE, eval = FALSE>>=
p <- plotSingleChrom(hg19IdeogramCyto, subchr = "chr1")
print(p)
## you could also run the following code to make nice adjusted 
## overview
## vp1 <- viewport(width = 1, height = 0.14)
## p <- plotSingleChrom(hg19IdeogramCyto, subchr = "chr1")
## print(p, vp = vp1)
@ %def   
%   \caption{Single Chromosome as Ideogram}
%   \label{fig:plotSingleChrom}
% \end{figure}


\begin{figure}[h!t!p]
  \centering
  \includegraphics[height = .25in, width = 5in]{intro-plotSingleChrom.pdf}\\
  \includegraphics[height = .25in, width = 5in]{intro-plotSingleChrom-zoom.pdf}  
  \caption{Single Chromosome as Ideogram. The top plot shows simple single chromosome,
  and the bottom one shows the one with fixed zoom window.}
  \label{fig:plotSingleChrom}
\end{figure}


% \begin{figure}[h!t!p]
%   \centering
@ 
<<plotSingleChrom-zoom, fig = FALSE, eval = FALSE>>=
p <- plotSingleChrom(hg19IdeogramCyto, subchr = "chr1",
                zoom.region = c(1e8, 1.5e8))
print(p)
@ %def   
%   \caption{Single Chromosome as Ideogram with zoomed rectangle}
%   \label{fig:plotSingleChrom-zoom}
% \end{figure}

% \begin{figure}[h!t!p]
%   \centering
%   \includegraphics[width = 0.55\textwidth][height = 1in, width = 5in]{intro-plotSingleChrom-zoom.pdf}
%   \caption{Single Chromosome as Ideogram with zoomed rectangle}
%   \label{fig:plotSingleChrom-zoom}
% \end{figure}


\subsection{Circular Overview}
Circular view is inspired by the \software{Circos} project
\footnote{\url{http://circos.ca/}} which is essentially writen
\software{Perl}\footnote{\url{http://www.perl.org/}}.\software{Circos}
visualize data in a circular layout, originally starting from
visualize the genomic data, then extends to many other fields, turn
out to be an elegant and useful way to visualize some other
infomation.

The static version of circular view is not implemented in this pacakge
yet, but it's defintely in the TODO. For users who are really
interested in using a circular view in \R{}, we have a highly
experimental circular view in another package \visnab{}, which is
interactive visualization toolkit for genomic data.
\section{Building Tracks for Linear View}
In most genome browsers, they all have such a view that including many
tracks, could be any anntation data along genomic coordinate. So we
try to provide a convenient constructor for building tracks, which
here in this package is simply vertically binding of several
plots. It's essentially a \Rfunction{grid.arrange}. So if users want
to have more delicate control over their tracks, they need manipulate
the graphics in \ggplot{} level or grid levels.

\Rfunction{tracks} function has some extra features and limitations
compare to \Rfunction{grid.arrange}.
\begin{itemize} \itemsep 0in
\item Always sitting on genomic or protein space.
\item Always using ncol = 1 as default arguments.
\item For now, since the unbalanced legend and labels in \ggplot{} has
  been solved (maybe just I haven't found such features). We simply
  remove legend and y axis labels to make sure all tracks are aligned
  exactly in the same way.
\item Remove the x-axis for most track except the last one. 
\item Does the ajustment of margins for you automatically.
\item Doesn't like \qplot{}, tracks doesn't return \Robject{ggplot}
  object. so processing your plot before you pass them to
  \Rfunction{tracks}.
\end{itemize}

We have already demonstrate how to use \Rfunction{tracks} in the
previous sections.

\section{Question-oriented Specific Graphics}
\subsection{Fragment Length and Splicing plots}

% \begin{figure}[h!t!p]
%   \centering                   
@ 
<<frag-length, fig = FALSE, eval = FALSE>>=
## canonical model
## since we know the gene symbol in the sample bam file is  "RBM17"
gr.rbm <- genesymbol["RBM17"]
exs <- exonsByOverlaps(txdb, gr.rbm, colum = "tx_id")
qplot(BamFile(bamfile), model = exs, geom = "fragment.length", group.name = "tx_id")
@ %def   
%   \caption{Fragment Length and splice summary trakcs}
%   \label{fig:frag}
% \end{figure}


\subsection{Mismatch Summary}
To be implemented.
% \subsection{Sequencing Logo}
% To be implemented.
\subsection{Manhattan Plots for SNP data}
Manhattan Plots for SNP data(can be achieved by facet\_gr for now, but
need more delicate control)
\section{Session Info}
@ 
<<sessionInfo>>=
sessionInfo()
@ %def 

% DI: I think you need to say something about color schemes, choices, and how missings are colored.

% DI: Need to add references, ggplot2 book, .... list of referenced R packages, ...
% Do oyu need to acknowledge Genentech?
\end{document}
